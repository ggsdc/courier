class Path(object):
    
    """ Class defined for the paths

    This class will be used for the paths, defining a series of methods and arguments

    """
    def __init__(self, idx, origin, destination, points, vehicle, names):
        """ Initialize magic method to create a new path.

        Parameters
        ----------
        self : Path
            In this case the newly created instance of Path.
        idx : int
            Index of the generated path.
        origin : int
            Code of the origin node of the path, usually a non-crossdocking point.
        destination : int
            Code of the destination of the path, usually a crossdocking point.
        points : tuple
            List of the points in the path, the order is destination - middle points - origin.
        vehicle : int
            Code of the vehicle that does the path.
        names : dict
            Dictionary with the names of the points to generate the name of the path and it's representation.

        Returns
        ------
            A new instance of Path

        """
        self.idx = idx
        self.origin = origin
        self.destination = destination
        self.points = points
        self.vehicle = vehicle
        self.name = '('
        for point in self.points:
            self.name += str(names[point]) + ', '
        
        self.name = self.name + str(self.vehicle)
        self.name += ')'

    def __repr__(self):
        """Representation magic method"""
        return 'Path  ' + str(self.idx) + ' - ' + str(self.name)

    def __str__(self):
        """Print magic method"""
        return 'Path with idx ' + str(self.idx) \
            + ' passing through the points ' + str(self.points) \
            + ' with the vehicle ' + str(self.vehicle)
    
    def set_demand(self, generated = 0, received = 0):
        """Method to assign the demand that the path can give service to
        
        Parameters
        ----------
        self : 
            The instance of Path in which we set the demand.
        generated : int
            Amount of parcels that have to leave the points in the arc. Defaults to 0.
        received : int
            Amount of parcels that have to reach the points in the arc. Defaults to 0.

        Returns
        -------
            Nothing, it just stores the values.
        """

        self.generated = generated
        self.received = received

    def set_points_generated(self, pointsGenerated = list()):
        """
        Method to assign the points that receive the demand generated from the points in the path

        Parameters
        ----------
        pointsGenerated : list
            List of the points that receive the demand generated by those points in the path.

        Returns
        -------
            Nothing, it just stores the list.
        """

        self.pointsGenerated = pointsGenerated

    def set_points_received(self, pointsReceived = list()):
        """
        Method to assign the points that generate the demand received in the points in the path.

        Parameters
        ----------
        pointsReceived : list
            List of the points that generate the demand received by those points in the path.

        Returns
        -------
            Nothing, it just stores the list.
        """
        self.pointsReceived = pointsReceived

    def get_demand(self):
        """
        Method to get the demand from the Path.

        Parameters
        ----------
        self : Path
            The path we get the demand from

        Returns
        -------
        A tuple with the values of the parameters generated y received of the path. These two default to zero in case they do not have value.
        """
        return self.generated, self.received

    def get_generated(self):
        """
        Method to get the generated demand from the Path.

        Parameters
        ----------
        self : Path
            The path we get the generated demand from

        Returns
        -------
        A value with the value of the parameter generated of the path. This default to zero in case it does not have value.
        """
        return self.generated

    def get_received(self):
        """
        Method to get the received demand from the Path.

        Parameters
        ----------
        self : Path
            The path we get the received demand from

        Returns
        -------
        A value with the value of the parameter received of the path. This default to zero in case it does not have value.
        """
        return self.received

    def get_pointsGenerated(self):
        """
        Method to get the list of the points it generates demand to from the Path.

        Parameters
        ----------
        self : Path
            The path we get the list from

        Returns
        -------
        The list of points the Path generates demand to.
        """
        return self.pointsGenerated

    def get_pointsReceived(self):
        """
        Method to get the list of the points it receives demand from from the Path.

        Parameters
        ----------
        self : Path
            The path we get the list from

        Returns
        -------
        The list of points the Path receives demand from.
        """
        return self.pointsReceived
  
    def print_demand(self):
        """
        Method to print the demand info of the Path
        """
        return 'The points in the path generate ' + str(self.generated) \
            + ' parcels and receive ' + str(self.received) + ' parcels'
    
    def set_distance(self, distance):
        """
        Method to set the length of the path.

        Parameters
        ----------
        distance : float
            Length of the path.

        Returns
        -------
            Nothing, it just stores the value.
        """
        self.distance = distance

    def get_distance(self):
        """
        Method to get the length of the path.

        Returns
        -------
            A value equal to the length of the path.
        """
        return self.distance

    def print_name(self):
        """
        Method to print the full name of the path.
        """
        return 'The path is: ' + str(self.name)

    def set_time(self, hours=0):
        """
        Method to assign the time duration of the path
        
        Parameters
        ----------
        hours : float
            Duration of the trip in hours. Defaults to 0.

        Returns
        -------
            Nothing, it just stores the value in hours and converts it to minutes as well.
        """
        self.hours = hours
        self.minutes = hours * 60

    def get_time(self):
        """
        Method to get the duration of the path.

        Returns
        -------
        A tuple of values, the hours and minutes parameters of the path.
        """
        return self.hours, self.minutes
    
    def get_hours(self):
        """
        Method to get just the duration of the path in hours.

        Returns
        -------
        A value equal to the hours parameter of the path.
        """
        return self.hours